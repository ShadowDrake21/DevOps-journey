Phase 1 - Pipes & Command Chaining:
First of all I have learnt neccessary information from the articles:

-https://www.geeksforgeeks.org/linux-unix/piping-in-unix-or-linux/;
- Command chaining: &&  # run next if success; ||  # run next if failure; ;   # run regardless;
- https://www.geeksforgeeks.org/linux-unix/xargs-command-unix/;
- https://www.geeksforgeeks.org/linux-unix/tee-command-linux-example/.

Next I have practiced:

- tried different pipelines: 
ps aux | grep bash | wc -l
du -sh /etc/* | sort -hr | head -5;
- combined with conditions: 
ping -c 1 google.com && echo "Network OK" || echo "Network down";
- tried xargs:
ls *.log | xargs -I {} gzip {};
- built a small chained command:
df -h | tee df.txt | grep '/dev/' | awk '{print $1, $5}'.

Phase 2 - Process Management & Job Control:
Firstly, I have learnt theoretical information using the sources:
- https://www.geeksforgeeks.org/linux-unix/top-command-in-linux-with-examples/;
- https://www.geeksforgeeks.org/linux-unix/htop-command-in-linux-with-examples/;
- Monitoring with watch and pstree (generated by ChatGPT);
- https://unix.stackexchange.com/questions/252349/what-is-the-difference-between-kill-pkill-and-killall.

Then I have had some practice:
- starting background jobs, bringing them to foreground and killing them, using top and htop to see CPU/memory usage, using watch and sending signals with pkill;

Phase 3 - Project: System Process Monitor:
I have built a small script "process_guardian.sh" that monitors high CPU usage, logs
it and optionally kills runaway processes. I added it to cron with @hourly option to run it automatically every hour.
Plus I have created a dashboard summary using: watch -n 5 "ps aux --sort=-%cpu | head -10".

